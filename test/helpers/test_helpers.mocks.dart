// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/core/failure/failure.dart' as _i5;
import 'package:task_manager/features/tasks/domain/entities/dailyTask.dart'
    as _i6;
import 'package:task_manager/features/tasks/domain/entities/miniTask.dart'
    as _i8;
import 'package:task_manager/features/tasks/domain/entities/priorityTask.dart'
    as _i7;
import 'package:task_manager/features/tasks/domain/repositories/taskManagementRepository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Taskmanagementrepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskmanagementrepository extends _i1.Mock
    implements _i3.Taskmanagementrepository {
  MockTaskmanagementrepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> pushNotification() =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNotification,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #pushNotification,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> syncData() => (super.noSuchMethod(
        Invocation.method(
          #syncData,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #syncData,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> createNewDailyTask(
          _i6.Dailytask? dailyTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewDailyTask,
          [dailyTask],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #createNewDailyTask,
            [dailyTask],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> createNewPriorityTask(
          _i7.Prioritytask? priorityTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewPriorityTask,
          [priorityTask],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #createNewPriorityTask,
            [priorityTask],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Prioritytask>>>
      getPriorityTasks() => (super.noSuchMethod(
            Invocation.method(
              #getPriorityTasks,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i7.Prioritytask>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.Prioritytask>>(
              this,
              Invocation.method(
                #getPriorityTasks,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Prioritytask>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dailytask>>> getDailyTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyTasks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dailytask>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Dailytask>>(
          this,
          Invocation.method(
            #getDailyTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dailytask>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addNewtaskInPriorityTask(
    _i7.Prioritytask? priortityTask,
    _i8.Minitask? newTask,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewtaskInPriorityTask,
          [
            priortityTask,
            newTask,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addNewtaskInPriorityTask,
            [
              priortityTask,
              newTask,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> editTaskInPriorityTask(
    _i7.Prioritytask? priorityTask,
    _i8.Minitask? editedTask,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTaskInPriorityTask,
          [
            priorityTask,
            editedTask,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #editTaskInPriorityTask,
            [
              priorityTask,
              editedTask,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateDailyTasks(
          List<_i6.Dailytask>? dailyTasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDailyTasks,
          [dailyTasks],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateDailyTasks,
            [dailyTasks],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updatePriorityTasks(
          List<_i7.Prioritytask>? priorityTasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePriorityTasks,
          [priorityTasks],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updatePriorityTasks,
            [priorityTasks],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteDailyTask(
          _i6.Dailytask? dailyTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDailyTask,
          [dailyTask],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteDailyTask,
            [dailyTask],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deletePriorityTask(
          _i7.Prioritytask? priorityTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePriorityTask,
          [priorityTask],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deletePriorityTask,
            [priorityTask],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTaskfromPriorityTask(
    _i7.Prioritytask? priorityTask,
    _i8.Minitask? miniTask,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskfromPriorityTask,
          [
            priorityTask,
            miniTask,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteTaskfromPriorityTask,
            [
              priorityTask,
              miniTask,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
